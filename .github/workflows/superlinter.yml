# This is a basic workflow that is manually triggered

name: Github Actions Flow

on: 
#   pull_request:
#   push: 
#     branches: 
#       - master
#       - develop1
#       - develop2
  pull_request_review:
      branches: 
      - develop1
      - develop2

      types:
      - submitted
      
jobs:
  super-lint:
    name: Lint code base 
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2    
        with: 
          fetch-depth: 10
          
      - name: Hive Actions
        uses: actions/setup-node@master
      - name: Hive C-Hive
        uses: c-hive/gha-npm-cache@v1

      - name: Install node modules
        run: |
          npm install && npm install --save eslint-config-airbnb && npm install eslint-plugin-jsx-a11y@latest --save-dev && npm install eslint-plugin-import@latest --save-dev
      - name: Run test
        run: |
          npm test
        
#       - name: Run Super-Linter
#         uses: github/super-linter@v3
#       - name: Run ESLint
#         uses: reviewdog/action-eslint@v1
#         with:
#           reporter: github-pr-review # Change reporter.
#           eslint_flags: 'src/'
#       - name: Lint Action (Homepage)
#         uses: wearerequired/lint-action@v1.9.0
#       - name: Analyze code statically using ESLint
#         uses: moneyforward/eslint-action@v0
      - name: Run linters (ESLINT)
        uses: wearerequired/lint-action@v1
        with:
          eslint: true
          prettier: true

#       - name: Gradel Clean
#         run: chmod +x ./gradlew
      

#       - name: Get branch names.
#         id: branch-names
#         uses: tj-actions/branch-names@v4
        
#       - uses: actions/checkout@v2
#         with:
#           ref: ${{ steps.branch-names.outputs.base_ref_branch }}

#       - name: Extract branch name ${{ github.event.commits[0].message }} github.event_name
#         run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
#         id: extract_branch


      - name: Step that prints name of pull request's base branch
        run: |
          echo "Pull request's base branch is: ${BASE_BRANCH}"
        env:
          BASE_BRANCH: ${{ github.base_ref }}
        if: github.event_name == 'commits'
        
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref#refs/heads/ }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      
      
  

      - name : GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

#       - name: get commit message
#         run: |
#            echo ::set-env name=commitmsg::$(git log --format=%B -n 1 ${{ github.event.after }})
      - name: show commit message
        run : echo $commitmsg

      - name: step1
        if: contains( env.commitmsg , 'try' )
        run: echo hello
      
      - name: Get commit branch and commit message
        if: github.event_name == 'push'
        run: |
          echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
    # In case of a pull_request event, the commit we care about is HEAD^2, that
    # is, the second parent of the pull request merge commit.
    # The current branch name is directly given by GITHUB_HEAD_REF
      - name: Get commit branch and commit message
        if: github.event_name == 'pull_request'
        run: |
          echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
     
        
      - name: Build Android apk (debug)
#       run: ./gradlew assembleDebug -Dorg.gradle.logging.level=info
        run: ./gradlew assembleDebug
#         run: |
#           cd ./android && ./gradlew assembleDebug
        working-directory: android
      - name: Upload Artifact Debug
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.head_commit.message }}-debug
          path: '**/*.apk'
#           name: app-release.apk
#           path: android/app/build/outputs/apk/release/
      - name: Build Android ( Release ) 
        run: |
          cd android && ./gradlew assembleRelease
      - name: Upload Artifact Release Android
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.commits[0].message }}-release
          path: '**/*.apk'

#       - name: Mattermost
#         uses: mattermost/action-mattermost-notify@1.0.2

          
          
#       - name: Install Pod Dependencies (IOS)
#         run: cd ./ios && pod install && cd ..       
#       - name: Build iOS (debug)
#         run: "xcodebuild \ -workspace ios/HelloReactNative.xcworkspace \ -scheme HelloReactNative \ clean archive \ -sdk iphoneos \ -configuration Debug \ -UseModernBuildSystem=NO \ -archivePath $PWD/HelloReactNative \ CODE_SIGNING_ALLOWED=NO"
#         env: 
#           DEFAULT_BRANCH: main
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}